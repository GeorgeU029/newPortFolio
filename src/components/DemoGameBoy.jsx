/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Smoggybeard (https://sketchfab.com/Smoggybeard)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/gameboy-advance-sp-b79bb731b6b844fd8c61bee31e26a323
Title: Gameboy Advance SP
*/

import React, { useRef, useEffect } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import * as THREE from 'three';
import gsap from 'gsap';
const DemoGameBoy = (props) => {
  const group = useRef();
  const { nodes, materials,animations } = useGLTF('/models/DemoGameBoy3.glb');

  const texturePath = props.texture || '/textures/project/Project3.PNG'; // Default texture path
  const imgTexture = useTexture(props.imgTexture);
  

  // Texture settings
  useEffect(() => {
    imgTexture.wrapS = imgTexture.wrapT = THREE.ClampToEdgeWrapping;
    imgTexture.repeat.set(4.5, 6.9); // Adjust for zoom
    imgTexture.offset.set(1.75, 0.62); // Center the texture
    imgTexture.rotation = Math.PI / 2; // Rotate by 90 degrees
    imgTexture.center.set(0.5, 0.5); // Ensure pivot is at the center
  }, [imgTexture]);

  const materialRef = useRef();

  // Update the material when texture changes
  useEffect(() => {
    if (materialRef.current) {
      materialRef.current.map = imgTexture;
      materialRef.current.needsUpdate = true; // Force material update
    }
  }, [imgTexture]);
  useEffect(() => {
    if (group.current) {
      gsap.from(group.current.rotation, {
        y: Math.PI / 2,
        duration: 2,
        ease: 'power3.out',
      });
    }
  }, [imgTexture]);
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0.057, -1.084, 0.783]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.GB_Silver_Base}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.GB_Silver_Base}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={materials.GB_Silver_Base}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7.geometry}
          material={materials.GB_Silver_Base}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_8.geometry}
          material={materials.Button_Black}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9.geometry}
          material={materials.Battery_Light}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_10.geometry}
          material={materials.Button_Black_Glossy}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_11.geometry}
          material={materials.Buttons_Light_Grey}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_12.geometry}
          material={materials.Port_Metal}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_13.geometry}
          material={materials.Port_Gold}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_14.geometry}
          material={materials.Screen_Black}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_15.geometry}
        >
          <meshBasicMaterial ref={materialRef} toneMapped={false} />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_16.geometry}
          material={materials.TEXT_White}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_17.geometry}
          material={materials.Black_TEXT_Background}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_18.geometry}
          material={materials.Pokemon_Ruby_Cartridge}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_19.geometry}
          material={materials.Pokemon_Ruby_Cover}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_21.geometry}
        material={materials.Screen}
        position={[-0.057, 1.084, -0.783]}
      />
    </group>
  );
};

useGLTF.preload('/models/DemoGameBoy3.glb');

export default DemoGameBoy;
